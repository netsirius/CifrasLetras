/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cifrasletras;

import combinaciones.*;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Arrays;

/**
 *
 * @author Javier Trivi√±o
 */
public class Juego_Letras extends javax.swing.JFrame {
    
    Character[] letras;
    Combinacion[][] gruposDeCombinaciones; // El indice i representa la combinacion (k sobre i+1)
    final int MAX_PALABRA_SIZE = 20; // <=50
    /**
     * Creates new form Juego_Letras
     * @throws java.io.FileNotFoundException
     */
    public Juego_Letras() throws FileNotFoundException, Exception {
        initComponents();
        
        gruposDeCombinaciones = new Combinacion[MAX_PALABRA_SIZE][];
        for (int i = 0; i < MAX_PALABRA_SIZE; i++) {
            gruposDeCombinaciones[i] = new Generador(MAX_PALABRA_SIZE, i+1).generar();
        }
        
        generarLetras();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        solution = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabelLetras = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        solution.setEditable(false);
        solution.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        solution.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        solution.setText("RESULTADO");
        solution.setToolTipText("");
        solution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solutionActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Letras");

        jButton1.setText("Resolver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelLetras.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelLetras.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelLetras.setText("LETRAS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLetras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(solution)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solution, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jLabelLetras))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jugar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        generarLetras();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void solutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solutionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_solutionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego_Letras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego_Letras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego_Letras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego_Letras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Juego_Letras().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Juego_Letras.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Juego_Letras.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    
    private void jugar(){
        Combinacion[] combinaciones;
        Combinacion combinacion;
        Palabra palabra, palabraEncontrada;
        Diccionario diccionario;
        int longitud_de_palabra = MAX_PALABRA_SIZE;
        boolean found = false;
        
        jProgressBar1.setMaximum(MAX_PALABRA_SIZE);
        
        try {
            while (longitud_de_palabra > 0 && !found) {
                combinaciones = gruposDeCombinaciones[longitud_de_palabra-1];
                System.out.println("Probando con palabras de longitud "+longitud_de_palabra);
                
                diccionario = new Diccionario("diccionarios/diccionariosPorLongitud/dic_longitud_"+longitud_de_palabra+".txt");
                for(int i = 0 ; i < combinaciones.length && !found ; i++){
                    
                    combinacion = combinaciones[i];
                    palabra = new Palabra(combinacion.convertToLetras(letras));
                    
                    palabraEncontrada = diccionario.buscarPalabra(palabra);
                    
                    if(palabraEncontrada != null){
                        found = true;
                        solution.setText(palabraEncontrada.toString());
                    }
                    
                    if(i>0 && ((i%(1000) == 0) || ((i+1)==combinaciones.length)))
                        System.out.println("Progreso: "+(i+1)+" de "+(combinaciones.length)+" combinaciones buscadas.");
                }
                
                longitud_de_palabra--;
            }
            
            if(!found) solution.setText("No encontrado");
            
        } catch (Exception ex) {
            Logger.getLogger(Juego_Letras.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(longitud_de_palabra > 0) longitud_de_palabra++;
        
        jProgressBar1.setValue(longitud_de_palabra);
    }
    
    private void generarLetras(){
        
        letras = new Character[MAX_PALABRA_SIZE];
        
        for (int i = 0; i < letras.length; i++) {
            letras[i] = (char) ((char) (new Random().nextInt(25))+65);
//            letras[i] = (char) ((char) 65+i);
        }
        
        jLabelLetras.setText(Arrays.toString(letras));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelLetras;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField solution;
    // End of variables declaration//GEN-END:variables
}
